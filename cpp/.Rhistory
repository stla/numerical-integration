giac <- Giac$new()
require("chromote")
require("htmlwidgets")
CreateSnapshot <- function(widget, filename, width = 992, height = 744,
mouse.hover = TRUE, mouse.xpos = 0.5, mouse.ypos = 0.5)
{
# Create temporary html file
tmp.files <- tempfile()
tmp.html <- paste0(tmp.files, ".html")
on.exit(unlink(tmp.html), add = TRUE)
on.exit(unlink(tmp.files, recursive = TRUE), add = TRUE)
saveWidget(widget, file = tmp.html, selfcontained = FALSE)
chrm <- Chrome$new(
path = find_chrome(),
args = "--disable-gpu --headless --remote-debugging-port=9222"
)
chromote <- Chromote$new(browser = chrm)
b <- ChromoteSession$new(parent = chromote, width = width, height = height)
b$Page$navigate(paste0("file://", tmp.html))
b$Page$loadEventFired()
xpos <- mouse.xpos * width
ypos <- mouse.ypos * height
if (mouse.hover)
b$Input$dispatchMouseEvent(type = "mouseMoved", x = xpos, y = ypos)
b$screenshot(filename)
invisible(b$close())
}
require("plotly")
require("htmlwidgets")
x <- 1:10
y <- 1:10
p <- plot_ly()
p <- add_trace(p, type = "scatter", x = x, y = y,
fill = "tozeroy", fillcolor = toRGB("#0000FF", alpha = 0.4),
mode = "lines")
p <- layout(p, hovermode = "x")
CreateSnapshot(p, "test.png", mouse.xpos = 0.8, mouse.ypos = 0.3)
Sys.unsetenv("HTTP_PROXY")
require("chromote")
require("htmlwidgets")
CreateSnapshot <- function(widget, filename, width = 992, height = 744,
mouse.hover = TRUE, mouse.xpos = 0.5, mouse.ypos = 0.5)
{
# Create temporary html file
tmp.files <- tempfile()
tmp.html <- paste0(tmp.files, ".html")
on.exit(unlink(tmp.html), add = TRUE)
on.exit(unlink(tmp.files, recursive = TRUE), add = TRUE)
saveWidget(widget, file = tmp.html, selfcontained = FALSE)
chrm <- Chrome$new(
path = find_chrome(),
args = "--disable-gpu --headless --remote-debugging-port=9222"
)
chromote <- Chromote$new(browser = chrm)
b <- ChromoteSession$new(parent = chromote, width = width, height = height)
b$Page$navigate(paste0("file://", tmp.html))
b$Page$loadEventFired()
xpos <- mouse.xpos * width
ypos <- mouse.ypos * height
if (mouse.hover)
b$Input$dispatchMouseEvent(type = "mouseMoved", x = xpos, y = ypos)
b$screenshot(filename)
invisible(b$close())
}
require("plotly")
require("htmlwidgets")
x <- 1:10
y <- 1:10
p <- plot_ly()
p <- add_trace(p, type = "scatter", x = x, y = y,
fill = "tozeroy", fillcolor = toRGB("#0000FF", alpha = 0.4),
mode = "lines")
p <- layout(p, hovermode = "x")
CreateSnapshot(p, "test.png", mouse.xpos = 0.8, mouse.ypos = 0.3)
Sys.unsetenv("HTTP_PROXY")
require("chromote")
require("htmlwidgets")
CreateSnapshot <- function(widget, filename, width = 992, height = 744,
mouse.hover = TRUE, mouse.xpos = 0.5, mouse.ypos = 0.5)
{
# Create temporary html file
tmp.files <- tempfile()
tmp.html <- paste0(tmp.files, ".html")
on.exit(unlink(tmp.html), add = TRUE)
on.exit(unlink(tmp.files, recursive = TRUE), add = TRUE)
saveWidget(widget, file = tmp.html, selfcontained = FALSE)
chrm <- Chrome$new(
path = find_chrome(),
args = "--disable-gpu --headless --remote-debugging-port=9222"
)
chromote <- Chromote$new(browser = chrm)
b <- ChromoteSession$new(parent = chromote, width = width, height = height)
b$Page$navigate(paste0("file://", tmp.html))
b$view()
b$Page$loadEventFired()
xpos <- mouse.xpos * width
ypos <- mouse.ypos * height
if (mouse.hover)
b$Input$dispatchMouseEvent(type = "mouseMoved", x = xpos, y = ypos)
b$screenshot(filename)
invisible(b$close())
}
require("plotly")
require("htmlwidgets")
x <- 1:10
y <- 1:10
p <- plot_ly()
p <- add_trace(p, type = "scatter", x = x, y = y,
fill = "tozeroy", fillcolor = toRGB("#0000FF", alpha = 0.4),
mode = "lines")
p <- layout(p, hovermode = "x")
CreateSnapshot(p, "test.png", mouse.xpos = 0.8, mouse.ypos = 0.3)
Sys.unsetenv("HTTP_PROXY")
require("chromote")
require("htmlwidgets")
CreateSnapshot <- function(widget, filename, width = 992, height = 744,
mouse.hover = TRUE, mouse.xpos = 0.5, mouse.ypos = 0.5)
{
# Create temporary html file
tmp.files <- tempfile()
tmp.html <- paste0(tmp.files, ".html")
on.exit(unlink(tmp.html), add = TRUE)
on.exit(unlink(tmp.files, recursive = TRUE), add = TRUE)
saveWidget(widget, file = tmp.html, selfcontained = FALSE)
chrm <- Chrome$new(
path = find_chrome(),
args = "--disable-gpu --headless --remote-debugging-port=9222"
)
chromote <- Chromote$new(browser = chrm)
b <- ChromoteSession$new(parent = chromote, width = width, height = height)
b$view()
b$Page$navigate(paste0("file://", tmp.html))
b$Page$loadEventFired()
xpos <- mouse.xpos * width
ypos <- mouse.ypos * height
if (mouse.hover)
b$Input$dispatchMouseEvent(type = "mouseMoved", x = xpos, y = ypos)
b$screenshot(filename)
invisible(b$close())
}
require("plotly")
require("htmlwidgets")
x <- 1:10
y <- 1:10
p <- plot_ly()
p <- add_trace(p, type = "scatter", x = x, y = y,
fill = "tozeroy", fillcolor = toRGB("#0000FF", alpha = 0.4),
mode = "lines")
p <- layout(p, hovermode = "x")
CreateSnapshot(p, "test.png", mouse.xpos = 0.8, mouse.ypos = 0.3)
require("plotly")
require("htmlwidgets")
x <- 1:10
y <- 1:10
p <- plot_ly()
p <- add_trace(p, type = "scatter", x = x, y = y,
fill = "tozeroy", fillcolor = toRGB("#0000FF", alpha = 0.4),
mode = "lines")
p <- layout(p, hovermode = "x")
CreateSnapshot(p, "test.png", mouse.xpos = 0.8, mouse.ypos = 0.3)
require("plotly")
require("htmlwidgets")
x <- 1:10
y <- 1:10
p <- plot_ly()
p <- add_trace(p, type = "scatter", x = x, y = y,
fill = "tozeroy", fillcolor = toRGB("#0000FF", alpha = 0.4),
mode = "lines")
p <- layout(p, hovermode = "x")
CreateSnapshot(p, "test.png", mouse.xpos = 0.8, mouse.ypos = 0.3)
library(webshot2)
library(DT)
dt <- datatable(mtcars[1:2,],rownames=FALSE, options = list(dom='t',ordering=F))
saveWidget(widget = dt,file = "simple_table.html")
webshot(url = "simple_table.html",file = "screenshot.png")
library(chromote)
chrm <- Chrome$new(
path = find_chrome(),
args = "--disable-gpu --headless --remote-debugging-port=9222"
)
chromote <- Chromote$new(browser = chrm)
b <- ChromoteSession$new(parent = chromote)
b$view()
Sys.unsetenv("HTTP_PROXY")
require("chromote")
require("htmlwidgets")
CreateSnapshot <- function(widget, filename, width = 992, height = 744,
mouse.hover = TRUE, mouse.xpos = 0.5, mouse.ypos = 0.5)
{
# Create temporary html file
tmp.files <- tempfile()
tmp.html <- paste0(tmp.files, ".html")
on.exit(unlink(tmp.html), add = TRUE)
on.exit(unlink(tmp.files, recursive = TRUE), add = TRUE)
saveWidget(widget, file = tmp.html, selfcontained = FALSE)
chrm <- Chrome$new(
path = find_chrome(),
args = "--disable-gpu --headless --remote-debugging-port=9222"
)
chromote <- Chromote$new(browser = chrm)
b <- ChromoteSession$new(parent = chromote, width = width, height = height)
b$Page$navigate(paste0("file://", tmp.html), wait_ = FALSE)
b$Page$loadEventFired()
xpos <- mouse.xpos * width
ypos <- mouse.ypos * height
if (mouse.hover)
b$Input$dispatchMouseEvent(type = "mouseMoved", x = xpos, y = ypos)
b$screenshot(filename)
invisible(b$close())
}
require("plotly")
require("htmlwidgets")
x <- 1:10
y <- 1:10
p <- plot_ly()
p <- add_trace(p, type = "scatter", x = x, y = y,
fill = "tozeroy", fillcolor = toRGB("#0000FF", alpha = 0.4),
mode = "lines")
p <- layout(p, hovermode = "x")
CreateSnapshot(p, "test.png", mouse.xpos = 0.8, mouse.ypos = 0.3)
CreateSnapshot <- function(widget, filename, width = 992, height = 744,
mouse.hover = TRUE, mouse.xpos = 0.5, mouse.ypos = 0.5)
{
# Create temporary html file
tmp.files <- tempfile()
tmp.html <- paste0(tmp.files, ".html")
on.exit(unlink(tmp.html), add = TRUE)
on.exit(unlink(tmp.files, recursive = TRUE), add = TRUE)
saveWidget(widget, file = tmp.html, selfcontained = FALSE)
chrm <- Chrome$new(
path = find_chrome(),
args = "--disable-gpu --headless --remote-debugging-port=9222"
)
chromote <- Chromote$new(browser = chrm)
b <- ChromoteSession$new(parent = chromote, width = width, height = height)
b$Page$navigate(paste0("file://", tmp.html), wait_ = FALSE)
p <- b$Page$loadEventFired(wait_ = FALSE)
p$then({
xpos <- mouse.xpos * width
ypos <- mouse.ypos * height
if (mouse.hover)
b$Input$dispatchMouseEvent(type = "mouseMoved", x = xpos, y = ypos)
b$screenshot(filename)
})
invisible(b$close())
}
require("plotly")
require("htmlwidgets")
x <- 1:10
y <- 1:10
p <- plot_ly()
p <- add_trace(p, type = "scatter", x = x, y = y,
fill = "tozeroy", fillcolor = toRGB("#0000FF", alpha = 0.4),
mode = "lines")
p <- layout(p, hovermode = "x")
CreateSnapshot(p, "test.png", mouse.xpos = 0.8, mouse.ypos = 0.3)
help(pa=promises)
CreateSnapshot <- function(widget, filename, width = 992, height = 744,
mouse.hover = TRUE, mouse.xpos = 0.5, mouse.ypos = 0.5)
{
# Create temporary html file
tmp.files <- tempfile()
tmp.html <- paste0(tmp.files, ".html")
on.exit(unlink(tmp.html), add = TRUE)
on.exit(unlink(tmp.files, recursive = TRUE), add = TRUE)
saveWidget(widget, file = tmp.html, selfcontained = FALSE)
chrm <- Chrome$new(
path = find_chrome(),
args = "--disable-gpu --headless --remote-debugging-port=9222"
)
chromote <- Chromote$new(browser = chrm)
b <- ChromoteSession$new(parent = chromote, width = width, height = height)
b$Page$navigate(paste0("file://", tmp.html), wait_ = FALSE)
p <- b$Page$loadEventFired(wait_ = FALSE)
p$then(function() {
xpos <- mouse.xpos * width
ypos <- mouse.ypos * height
if (mouse.hover)
b$Input$dispatchMouseEvent(type = "mouseMoved", x = xpos, y = ypos)
b$screenshot(filename)
})
invisible(b$close())
}
require("plotly")
require("htmlwidgets")
x <- 1:10
y <- 1:10
p <- plot_ly()
p <- add_trace(p, type = "scatter", x = x, y = y,
fill = "tozeroy", fillcolor = toRGB("#0000FF", alpha = 0.4),
mode = "lines")
p <- layout(p, hovermode = "x")
CreateSnapshot(p, "test.png", mouse.xpos = 0.8, mouse.ypos = 0.3)
require("chromote")
require("htmlwidgets")
CreateSnapshot <- function(widget, filename, width = 992, height = 744,
mouse.hover = TRUE, mouse.xpos = 0.5, mouse.ypos = 0.5)
{
# Create temporary html file
tmp.files <- tempfile()
tmp.html <- paste0(tmp.files, ".html")
on.exit(unlink(tmp.html), add = TRUE)
on.exit(unlink(tmp.files, recursive = TRUE), add = TRUE)
saveWidget(widget, file = tmp.html, selfcontained = FALSE)
chrm <- Chrome$new(
path = find_chrome(),
args = "--disable-gpu --headless --remote-debugging-port=9222"
)
chromote <- Chromote$new(browser = chrm)
b <- ChromoteSession$new(parent = chromote, width = width, height = height)
b$Page$navigate(paste0("file://", tmp.html), wait_ = FALSE)
p <- b$Page$loadEventFired(wait_ = FALSE)
p$then(function() {
xpos <- mouse.xpos * width
ypos <- mouse.ypos * height
if (mouse.hover)
b$Input$dispatchMouseEvent(type = "mouseMoved", x = xpos, y = ypos)
b$screenshot(filename)
invisible(b$close())
})
}
require("plotly")
require("htmlwidgets")
x <- 1:10
y <- 1:10
p <- plot_ly()
p <- add_trace(p, type = "scatter", x = x, y = y,
fill = "tozeroy", fillcolor = toRGB("#0000FF", alpha = 0.4),
mode = "lines")
p <- layout(p, hovermode = "x")
CreateSnapshot(p, "test.png", mouse.xpos = 0.8, mouse.ypos = 0.3)
library(giacR)
giac <- Giac$new()
invisible(giac$close())
library(curl)
pool <- new_pool()
# callback
cb <- function(req){cat("done:", req$url, ": HTTP:", req$status, "\n")}
# multi fetch
curl_fetch_multi('https://www.google.com', done = cb, pool = pool)
curl_fetch_multi('https://cloud.r-project.org', done = cb, pool = pool)
curl_fetch_multi('https://hb.cran.dev/blabla', done = cb, pool = pool)
out <- multi_run(pool = pool)
-pi/2+2*pi
-pi/2+2*pi*360/pi
-pi/2+pi*360/pi
-pi/2*360/pi
-pi/2+2*pi*180/pi
-pi/2+pi*180/pi
(-pi-pi/2)*180/pi
help(pa=rsvg)
library(jacobi)
kleinj(0.01i)
kleinj(0.01i + 1)
kleinj(-1/0.01i)
kleinj(-1/(0.01i+1))
list.dirs()
setwd("C:/SL/R")
list.dirs()
?list.dirs
list.dirs(no..=T)
dir(no.. = T)
dir(no.. = T, recursive=T)
list.dirs()
list.dirs(no..=T)
dir(no.. = T, recursive=T)
dir(no.. = T, recursive=T, include.dirs = T)
list.dirs(full.names = F)
library(tools)
dest <- "saving"
folders <- intersect(
list.dirs(full.names = FALSE),
list.files(no.. = TRUE, recursive = TRUE, include.dirs = TRUE)
)
folders
for(folder in folders) {
dir.create(file.path(dest, folder))
}
warnings()
library(tools)
dest <- "saving/R"
folders <- intersect(
list.dirs(full.names = FALSE),
list.files(no.. = TRUE, recursive = TRUE, include.dirs = TRUE)
)
for(folder in folders) {
dir.create(file.path(dest, folder))
}
warnings()
setwd("C:/SL")
library(tools)
setwd("C:/SL")
dest <- "saving/R"
folders <- intersect(
list.dirs(full.names = FALSE),
list.files(no.. = TRUE, recursive = TRUE, include.dirs = TRUE)
)
library(tools)
setwd("C:/SL/R")
folders <- intersect(
list.dirs(full.names = FALSE),
list.files(no.. = TRUE, recursive = TRUE, include.dirs = TRUE)
)
setwd("C:/SL")
dest <- "saving/R"
for(folder in folders) {
dir.create(file.path(dest, folder))
}
file_ext("GHCUP.png")
setwd("C:/SL/R")
Rfiles <- list.files(
pattern = "\\.R$",
no.. = TRUE, recursive = TRUE, include.dirs = FALSE
)
head(Rfiles)
setwd("C:/SL")
for(Rfile in Rfiles) {
file.copy(file.path("R", file), Rfile)
}
for(Rfile in Rfiles) {
file.copy(file.path("R", Rfile), Rfile)
}
warnings()
?file.copy
setwd("saving/R")
for(Rfile in Rfiles) {
file.copy(file.path("R", Rfile), Rfile)
}
head(Rfiles)
setwd("saving/R")
for(Rfile in Rfiles) {
file.copy(file.path("../R", Rfile), Rfile)
}
for(Rfile in Rfiles) {
file.copy(file.path("C:/SL/R", Rfile), Rfile)
}
setwd("C:/SL/R")
Rfiles <- list.files(
pattern = "\\.Rmd$",
no.. = TRUE, recursive = TRUE, include.dirs = FALSE
)
setwd("C:/SL")
dest <- "saving/R"
setwd("saving/R")
for(Rfile in Rfiles) {
file.copy(file.path("C:/SL/R", Rfile), Rfile)
}
setwd("C:/SL/Asymptote/")
Rfiles <- list.files(
pattern = "(\\.R$|\\.asy$)",
no.. = TRUE, recursive = TRUE, include.dirs = FALSE
)
Rfiles
setwd("C:/SL/saving/Asymptote")
for(Rfile in Rfiles) {
file.copy(file.path("C:/SL/R", Rfile), Rfile)
}
setwd("C:/SL/saving/Asymptote")
for(Rfile in Rfiles) {
file.copy(file.path("C:/SL/Asymptote/", Rfile), Rfile)
}
library(tools)
setwd("C:/SL/POV-Ray/")
folders <- intersect(
list.dirs(full.names = FALSE),
list.files(no.. = TRUE, recursive = TRUE, include.dirs = TRUE)
)
Rfiles <- list.files(
pattern = "(\\.pov$|\\.ini$)",
no.. = TRUE, recursive = TRUE, include.dirs = FALSE
)
setwd("C:/SL")
dest <- "saving/POV-Ray"
for(folder in folders) {
dir.create(file.path(dest, folder))
}
setwd("C:/SL/saving/POV-Ray")
for(Rfile in Rfiles) {
file.copy(file.path("C:/SL/POV-Ray/", Rfile), Rfile)
}
library(tools)
setwd("C:/SL/Shiny/")
folders <- intersect(
list.dirs(full.names = FALSE),
list.files(no.. = TRUE, recursive = TRUE, include.dirs = TRUE)
)
Rfiles <- list.files(
pattern = "(\\.R$|\\.js|\\.css$)",
no.. = TRUE, recursive = TRUE, include.dirs = FALSE
)
setwd("C:/SL")
dest <- "saving/Shiny"
for(folder in folders) {
dir.create(file.path(dest, folder))
}
setwd("C:/SL/saving/Shiny")
for(Rfile in Rfiles) {
file.copy(file.path("C:/SL/Shiny/", Rfile), Rfile)
}
setwd("C:/SL/Shiny/")
Rfiles <- list.files(
pattern = "(\\.Rmd$)",
no.. = TRUE, recursive = TRUE, include.dirs = FALSE
)
setwd("C:/SL")
setwd("C:/SL/saving/Shiny")
for(Rfile in Rfiles) {
file.copy(file.path("C:/SL/Shiny/", Rfile), Rfile)
}
Rfiles
setwd("C:/SL/Haskell/numerical-integration/cpp")
list.files("Eigen")
